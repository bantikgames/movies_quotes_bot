from keyboards.client_kb import begin_kb, modes_kb, help_kb
from msg import start_msg, help_modes_msg, help_points_msg, help_stat_msg
from config import API_TOKEN
from aiogram.dispatcher.filters import Text
import logging
from aiogram import Bot, Dispatcher, executor, types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(start_msg, reply_markup=begin_kb)


@dp.message_handler(Text(equals="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def my_stat(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")


@dp.message_handler(Text(equals="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
async def start_quiz(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã", reply_markup=modes_kb)


@dp.message_handler(Text(equals="‚ùî –ü–æ–º–æ—â—å"))
async def help_func(message: types.Message):
    await message.answer("–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=help_kb)


@dp.message_handler(Text(equals="üéÆ –†–µ–∂–∏–º—ã –∏–≥—Ä—ã"))
async def help_game_modes(message: types.Message):
    await message.answer(help_modes_msg)


@dp.message_handler(Text(equals="‚≠ê –ò–≥—Ä–æ–≤—ã–µ –æ—á–∫–∏"))
async def help_points(message: types.Message):
    await message.answer(help_points_msg)


@dp.message_handler(Text(equals="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def help_stat(message: types.Message):
    await message.answer(help_stat_msg)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
