from keyboards.client_kb import begin_kb, modes_kb, help_kb
from config import API_TOKEN
from aiogram.dispatcher.filters import Text
import logging
from aiogram import Bot, Dispatcher, executor, types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
start_msg = "üôã‚Äç –ü–†–ò–í–ï–¢–°–¢–í–£–ï–ú!" + "\n" + "\n" + "–û—Ç–≥–∞–¥—ã–≤–∞–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤, –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã, —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å " \
            "–¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."

help_modes_text = "–í –∏–≥—Ä–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:" + "\n" + "\n" + "1Ô∏è‚É£ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π: —Ä–∞—É–Ω–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, " \
                                                                  "—Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞—Å—Ç–µ—Ç." + "\n" + "\n" + \
                  "2Ô∏è‚É£ –ù–∞ –≤—Ä–µ–º—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞ 1 –º–∏–Ω—É—Ç—É."

help_points_text = "–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ‚≠ê (–æ—á–∫–∏). –ò—Ö –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏. –¢–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ " \
                   "–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏."

help_stat_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ —Ä–µ–∂–∏–º–æ–≤. –í –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞ –ø–æ–¥–≤–æ–¥—è—Ç—Å—è –∏—Ç–æ–≥–∏."


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(start_msg, reply_markup=begin_kb)


@dp.message_handler(Text(equals="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def my_stat(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")


@dp.message_handler(Text(equals="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
async def start_quiz(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã", reply_markup=modes_kb)


@dp.message_handler(Text(equals="‚ùî –ü–æ–º–æ—â—å"))
async def help_func(message: types.Message):
    await message.answer("–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=help_kb)


@dp.message_handler(Text(equals="üéÆ –†–µ–∂–∏–º—ã –∏–≥—Ä—ã"))
async def help_game_modes(message: types.Message):
    await message.answer(help_modes_text)


@dp.message_handler(Text(equals="‚≠ê –ò–≥—Ä–æ–≤—ã–µ –æ—á–∫–∏"))
async def help_points(message: types.Message):
    await message.answer(help_points_text)


@dp.message_handler(Text(equals="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def help_stat(message: types.Message):
    await message.answer(help_stat_text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
